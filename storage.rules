rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // User avatars - users can only upload/access their own avatar
    match /avatars/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Task attachments - users can only access attachments on tasks they have access to
    match /task-attachments/{taskId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/tasks/$(taskId)) &&
        (get(/databases/$(database)/documents/tasks/$(taskId)).data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/tasks/$(taskId)).data.sharedWith[request.auth.uid] == true);
    }
    
    // Workspace files - users can only access files in workspaces they're members of
    match /workspace-files/{workspaceId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members;
    }
    
    // Temporary uploads - users can only access their own temp files
    match /temp/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // File size limits
    function isValidFileSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // File type validation
    function isValidFileType() {
      return request.resource.contentType.matches('image/.*') ||
             request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('text/.*') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.*');
    }
    
    // Apply size and type validation to all uploads
    match /{allPaths=**} {
      allow write: if request.auth != null && isValidFileSize() && isValidFileType();
    }
  }
} 